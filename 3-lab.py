import random
def even_numbers():
    print("\t\t\t\t\tEven numbers")
    try:
        n = int(input())
        a = 1
        while a<n:
            a += 1
            if a%2==0:
                print(a)

    except:
        print()
"""
import random: Этот оператор импортирует модуль random, который можно использовать для генерации случайных чисел. В данной функции random не используется, поэтому импорт можно удалить, если он не нужен.

print("\t\t\t\t\tEven numbers"): Эта строка выводит заголовок, который говорит пользователю, что функция выводит четные числа.

n = int(input()): Здесь пользователь должен ввести число n, до которого будут выводиться четные числа. int(input()) считывает ввод пользователя и преобразует его в целое число.

a = 1: Инициализирует переменную a значением 1. Она будет использоваться для итерации через числа от 1 до n.

while a < n:: Это начало цикла while, который будет выполняться, пока a меньше, чем n.

a += 1: Увеличивает значение a на 1 на каждой итерации цикла.

if a % 2 == 0:: Эта строка проверяет, является ли a четным числом, путем вычисления остатка от деления a на 2. Если остаток равен 0, то число a четное.

print(a): Если число a четное, оно выводится на экран.

except:: Этот блок обработки исключений "ловит" исключения, которые могут возникнуть внутри функции. В данном случае, он ничего не делает и просто продолжает выполнение программы.
"""
#--------------------------------------

def  Factorial():
    print("\t\t\t\t\tFactorial")
    try:
        n = int(input())
        a = 1
        res = 1
        while a<=n:
            res *= a
            a += 1
            print(res)

    except:
        print("Error!")
"""
print("\t\t\t\t\tFactorial"): Эта строка выводит заголовок, который говорит пользователю, что функция будет вычислять факториал числа.

try:: Этот блок try используется для "поймать" и обработать возможные исключения, которые могут возникнуть во время выполнения кода внутри блока try.

n = int(input()): Здесь пользователь должен ввести число n, для которого будет вычисляться факториал. int(input()) считывает ввод пользователя и преобразует его в целое число.

a = 1: Инициализирует переменную a значением 1. Она будет использоваться для итерации от 1 до n.

res = 1: Инициализирует переменную res значением 1, которое будет хранить текущее значение факториала.

while a <= n:: Этот цикл while будет выполняться, пока a меньше или равно n.

res *= a: Умножает текущее значение res на a, чтобы обновить факториал.

a += 1: Увеличивает a на 1 на каждой итерации цикла.

print(res): На каждой итерации цикла выводит текущее значение факториала.

except:: Этот блок обработки исключений "ловит" исключения, которые могут возникнуть внутри функции. В данном случае, если происходит ошибка (например, пользователь вводит нецелое число), код выводит сообщение "Error!".
"""

#---------------------------------------

def Number_search():
    print("\t\t\t\t\tNumber Search")
    try:
        while True:
            num = int(input())

            if num == 42:
                break

    except:
        print("Error!")
"""
print("\t\t\t\t\tNumber Search"): Эта строка выводит заголовок, который говорит пользователю, что функция будет выполнять поиск числа 42.

try:: Этот блок try используется для "поймать" и обработать возможные исключения, которые могут возникнуть во время выполнения кода внутри блока try.

while True:: Этот бесконечный цикл while будет выполняться до тех пор, пока условие True не изменится на False. В данном случае цикл будет выполняться бесконечно.

num = int(input()): Здесь пользователь должен ввести число. int(input()) считывает ввод пользователя и преобразует его в целое число.

if num == 42:: Этот блок проверяет, равно ли введенное число 42.

break: Если число равно 42, то выполнение цикла прерывается с помощью команды break, и программа завершает выполнение функции.

except:: Этот блок обработки исключений "ловит" исключения, которые могут возникнуть внутри функции. В данном случае, если происходит ошибка (например, пользователь вводит нечисловое значение), код выводит сообщение "Error!".
"""

#---------------------------------------

def Character_Counting():
    print("\t\t\t\t\tCharacter Counting")
    str = input("insert string:")
    print(str.count("a"))

"""
print("\t\t\t\t\tCharacter Counting"): Эта строка выводит заголовок, который говорит пользователю, что функция будет подсчитывать символы "a" в строке.

str = input("insert string:"): Здесь пользователь должен ввести строку, в которой будут подсчитываться символы "a". input("insert string:") считывает ввод пользователя и сохраняет его в переменной str.

print(str.count("a")): Эта строка подсчитывает количество символов "a" в строке str с помощью метода count(), и результат выводится на экран.

 Функция Character_Counting выполняет следующие действия:

Запрашивает у пользователя ввод строки.
Подсчитывает и выводит количество символов "a" в этой строке.
"""
#---------------------------------------


def Sum_of_digits_of_a_number():
    print("\t\t\t\t\tCharacter Counting")
    number = input()
    sum = 0

    for digit in number:
        if digit.isdigit():
            sum += int(digit)


    print(sum)
"""
print("\t\t\t\t\tCharacter Counting"): Эта строка выводит заголовок, который говорит пользователю, что функция будет подсчитывать сумму цифр в числе.

number = input(): Здесь пользователь должен ввести число, в котором будут подсчитываться цифры. input() считывает ввод пользователя в виде строки и сохраняет его в переменной number.

sum = 0: Инициализирует переменную sum значением 0, которая будет хранить сумму цифр.

for digit in number:: Этот цикл for перебирает каждую цифру в строке number.

if digit.isdigit(): Эта строка проверяет, является ли digit цифрой, вызывая метод isdigit(). Если digit является цифрой, то выполнится следующий блок кода.

sum += int(digit): Здесь текущая цифра digit преобразуется в целое число с помощью int(digit) и добавляется к сумме sum.

print(sum): Выводит на экран общую сумму цифр.

функция Sum_of_digits_of_a_number выполняет следующие действия:

Запрашивает у пользователя ввод числа.
Подсчитывает и выводит сумму его цифр.
"""
#---------------------------------------

def Fibonacci_numbers():
    print("\t\t\t\t\tFibonacci_numbers")
    n = int(input())
    a=0
    b=1
    sum = 0
    while sum<n:
        print(a)
        a, b = b, a + b
        sum+=1
    print()
"""
print("\t\t\t\t\tFibonacci_numbers"): Эта строка выводит заголовок, который говорит пользователю, что функция будет выводить числа последовательности Фибоначчи.

n = int(input()): Здесь пользователь должен ввести число n, которое указывает, сколько чисел из последовательности Фибоначчи необходимо вывести. int(input()) считывает ввод пользователя и преобразует его в целое число.

a = 0 и b = 1: Эти две переменные инициализируют начальные значения для первых двух чисел последовательности Фибоначчи.

sum = 0: Инициализирует переменную sum значением 0, которая будет использоваться для подсчета, сколько чисел уже было выведено.

while sum < n:: Этот цикл while будет выполняться до тех пор, пока не будет выведено n чисел.

print(a): Выводит текущее число последовательности Фибоначчи.

a, b = b, a + b: Здесь выполняется обновление значений переменных a и b, чтобы получить следующее число в последовательности Фибоначчи.

sum += 1: Увеличивает переменную sum на 1 после каждой итерации цикла.

print(): Эта строка выводит пустую строку для более четкого разделения вывода.

Итак, функция Fibonacci_numbers выполняет следующие действия:

Запрашивает у пользователя число n, которое указывает, сколько чисел из последовательности Фибоначчи нужно вывести.
Выводит первые n чисел последовательности Фибоначчи.

"""
#---------------------------------------

def Reverse_a_string():
    print("\t\t\t\t\tReverse_a_string")

    str = input()
    print(''.join(list(reversed(str))))



def Skip_even_ones():
    print("\t\t\t\t\tSkip_even_ones")

    odd_sum = 0

    while True:
        number = input()

        if number.lower() == "stop":
            break

        try:
            number = int(number)
            if number % 2 == 0:
                continue
            else:
                odd_sum += number
        except ValueError:
            print()

    print(odd_sum)

"""
Reverse_a_string:
print("\t\t\t\t\tReverse_a_string"): Эта строка выводит заголовок, который говорит пользователю, что функция будет выполнять операцию обращения строки.

str = input(): Здесь пользователь должен ввести строку, которую нужно обратить. input() считывает ввод пользователя и сохраняет его в переменной str.

print(''.join(list(reversed(str))): Здесь происходит обращение строки str с помощью функции reversed(), затем результат преобразуется в список и затем в строку с использованием join(). Обратенная строка выводится на экран.

Skip_even_ones:
print("\t\t\t\t\tSkip_even_ones"): Эта строка выводит заголовок, который говорит пользователю, что функция будет выполнять операцию пропуска четных чисел.

odd_sum = 0: Инициализирует переменную odd_sum значением 0, которая будет использоваться для хранения суммы нечетных чисел.

while True:: Этот бесконечный цикл while будет выполняться до тех пор, пока условие True не изменится на False. В данном случае цикл будет выполняться бесконечно.

number = input(): Здесь пользователь должен ввести число или "stop" для завершения. input() считывает ввод пользователя и сохраняет его в переменной number.

if number.lower() == "stop":: Этот блок проверяет, если введенное значение number (приведенное к нижнему регистру) равно "stop", то выполнение цикла прерывается с помощью команды break, и программа завершает выполнение функции.

try:: Этот блок обработки исключений "ловит" исключения, которые могут возникнуть внутри функции.

number = int(number): Здесь введенное значение number преобразуется в целое число с помощью int(number).

if number % 2 == 0:: Этот блок проверяет, является ли число четным. Если число четное, выполнение текущей итерации цикла завершается с помощью continue.

else:: Если число нечетное, то выполняется следующий блок кода.

odd_sum += number: Нечетное число прибавляется к переменной odd_sum для подсчета суммы нечетных чисел.

except ValueError:: Этот блок обработки исключений обрабатывает ошибки, которые могут возникнуть внутри функции. Если происходит ошибка (например, пользователь вводит нечисловое значение), код выполняет print() для "пропуска" ошибки.

print(odd_sum): Выводит на экран общую сумму нечетных чисел.

Итак, функция Reverse_a_string обращает введенную строку, а функция Skip_even_ones выполняет следующие действия:

Запрашивает у пользователя числа до тех пор, пока не введено "stop".
Пропускает четные числа и подсчитывает сумму нечетных чисел.
"""
#---------------------------------------

def Guess_the_number():
    print("\t\t\t\t\tGuess_the_number")
    r = random.randint(0, 100)

    print(r)
    while True:
        guess = input()
        if guess.lower() == "stop":
            print("Correct!")
            break
        try:
            guess = int(guess)
            if guess == r:
                print("Correct")
                break
            if guess<r:
                print("Too small")
            elif guess > r:
                print("Too big")
            elif guess == "stop":
                break

        except:
            print("Error!")


"""
print("\t\t\t\t\tGuess_the_number"): Эта строка выводит заголовок, который говорит пользователю, что функция будет выполнять игру "Угадай число".

r = random.randint(0, 100): Здесь компьютер генерирует случайное число от 0 до 100 и сохраняет его в переменной r. Это число, которое пользователь должен угадать.

print(r): Здесь вы печатаете загаданное число, но обычно это делается только для отладки. В реальной игре это число не должно выводиться пользователю.

while True:: Этот бесконечный цикл while будет выполняться до тех пор, пока пользователь не угадает число или не введет "stop" для завершения игры.

guess = input(): Здесь пользователь должен ввести свои догадки (число или "stop"). input() считывает ввод пользователя и сохраняет его в переменной guess.

if guess.lower() == "stop":: Этот блок проверяет, если пользователь ввел "stop", то выполнение цикла прерывается с помощью команды break, и программа завершает выполнение функции.

try:: Этот блок обработки исключений "ловит" исключения, которые могут возникнуть внутри функции.

guess = int(guess): Здесь проверяется, является ли введенная строка числом. Если да, она преобразуется в целое число с помощью int(guess).

if guess == r:: Этот блок проверяет, если угаданное число (guess) равно загаданному числу (r), то игрок угадал число и игра завершается с сообщением "Correct".

if guess < r:: Если угаданное число меньше загаданного числа, выводится сообщение "Too small", указывая игроку, что его число слишком мало.

elif guess > r:: Если угаданное число больше загаданного числа, выводится сообщение "Too big", указывая игроку, что его число слишком большое.

except:: Этот блок обработки исключений обрабатывает ошибки, которые могут возникнуть внутри функции. Если происходит ошибка (например, пользователь вводит нечисловое значение), код выполняет print("Error!") для сообщения об ошибке.
"""
#---------------------------------------


def Palindrome():
    print("\t\t\t\t\tPalindrome")
    str = input()
    str2 =""
    str2 = ''.join(reversed(str))
    if str==str2:
        print("Palindrome")
    else:
        print("not Polindrome")

"""
print("\t\t\t\t\tPalindrome"): Эта строка выводит заголовок, который говорит пользователю, что функция будет проверять, является ли строка палиндромом.

str = input(): Здесь пользователь должен ввести строку, которую нужно проверить на палиндром. input() считывает ввод пользователя и сохраняет его в переменной str.

str2 = ''.join(reversed(str)): Здесь строка str обращается с помощью функции reversed(), затем результат преобразуется в список и затем в строку с использованием join(). Это создает обратную версию введенной строки и сохраняет её в переменной str2.

if str == str2:: Этот блок проверяет, равна ли исходная строка str своей обратной версии str2. Если строки равны, то это означает, что строка является палиндромом, и выводится сообщение "Palindrome".

else:: Если строки не равны, то выводится сообщение "not Palindrome", указывая, что строка не является палиндромом.
"""

#---------------------------------------


def Number_to_the_power():
    print("\t\t\t\t\tNumber_to_the_power")
    x = int(input())
    y = int(input())
    res = 1
    while y > 0:
        res *= x
        y -= 1
    print(res)
    """
    print("\t\t\t\t\tNumber_to_the_power"): Эта строка выводит заголовок, который говорит пользователю, что функция будет выполнять возведение числа в степень.

x = int(input()): Здесь пользователь должен ввести число, которое нужно возвести в степень. input() считывает ввод пользователя и сохраняет его в переменной x.

y = int(input()): Здесь пользователь должен ввести степень, в которую нужно возвести число. input() считывает ввод пользователя и сохраняет его в переменной y.

res = 1: Создается переменная res и инициализируется значением 1. Эта переменная будет использоваться для накопления результата.

while y > 0:: Этот цикл while будет выполняться, пока степень y больше 0.

res *= x: Внутри цикла текущее значение res умножается на число x. Это эквивалентно операции res = res * x, и таким образом, результат возвышения числа x в степень умножается на x.

y -= 1: Значение степени y уменьшается на 1, чтобы приблизиться к завершению возведения в степень.

print(res): После завершения цикла выводится результат возведения числа x в степень y.
    """

#---------------------------------------
"""
Counting_Prime_Numbers(): Эта функция предназначена для подсчета и вывода простых чисел в диапазоне от 2 до N, где N - это положительное целое число, введенное пользователем. Функция использует алгоритм проверки чисел на простоту.

Reverse_number(): Эта функция позволяет пользователю ввести число, а затем выводит его обратное (реверсированное) значение.

Check_for_primality(): Эта функция позволяет пользователю ввести число и затем определяет, является ли оно простым (не имеет делителей, кроме 1 и самого себя) или нет. Результат проверки выводится на экран.

caesar_cipher(text, shift): Эта функция выполняет шифрование текста методом Цезаря. Она принимает текст и сдвиг в качестве аргументов, а затем возвращает зашифрованный текст с использованием указанного сдвига.

Последние строки кода в вашем скрипте выполняют вызовы каждой из вышеперечисленных функций, что позволяет пользователю взаимодействовать с ними. Пользователю предлагается ввести данные (например, число, текст или строку) для выполнения соответствующей функции.
"""








 """
 even_numbers(): Эта функция запрашивает у пользователя число n и затем выводит все четные числа от 1 до n. Она использует цикл while для выполнения этой задачи.

Factorial(): Эта функция запрашивает у пользователя число n и затем вычисляет факториал этого числа, выводя промежуточные результаты на каждой итерации в цикле.

Number_search(): Эта функция выполняет бесконечный цикл, в котором пользователю предлагается вводить числа. Если пользователь введет число 42, цикл завершится.

Character_Counting(): Эта функция запрашивает у пользователя строку и подсчитывает количество символов 'a' в этой строке, затем выводит результат.

Sum_of_digits_of_a_number(): Эта функция запрашивает у пользователя число, а затем вычисляет сумму его цифр, игнорируя другие символы.

Fibonacci_numbers(): Эта функция запрашивает у пользователя число n и затем выводит первые n чисел Фибоначчи.

Reverse_a_string(): Эта функция запрашивает у пользователя строку и выводит эту строку в обратном порядке.

Skip_even_ones(): Эта функция выполняет бесконечный цикл, в котором пользователю предлагается вводить числа. Если пользователь вводит четное число, цикл пропускает это число, а если вводит нечетное число, оно добавляется к общей сумме нечетных чисел. Цикл завершается, если пользователь вводит "stop".

Guess_the_number(): Эта функция генерирует случайное число в диапазоне от 0 до 100 и предлагает пользователю угадать это число. Пользователь может вводить числа, и код будет сообщать, сли число меньше или больше задуманного. Цикл завершается, если пользователь вводит "stop".

Palindrome(): Эта функция запрашивает у пользователя строку и проверяет, является ли она палиндромом (читается одинаково с начала и с конца). Результат выводится на экран.

Number_to_the_power(): Эта функция запрашивает у пользователя два числа x и y, а затем вычисляет x в степени y и выводит результат.

Counting_Prime_Numbers(): Эта функция запрашивает у пользователя положительное целое число N и затем выводит все простые числа до N.

Reverse_number(): Эта функция запрашивает у пользователя число и выводит его в обратном порядке.

Check_for_primality(): Эта функция запрашивает у пользователя число и проверяет, является ли оно простым числом, затем выводит результат.

caesar_cipher(): Эта функция реализует шифр Цезаря, который шифрует текст с использованием сдвига на определенное количество позиций. Пользователю предлагается ввести строку и число сдвига, и функция выводит зашифрованный текст.
  """